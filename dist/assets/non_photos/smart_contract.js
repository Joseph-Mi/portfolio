"use strict";const{Contract}=require("fabric-contract-api"),ClientIdentity=require("fabric-shim").ClientIdentity;class MyContract extends Contract{async initLedger(t){console.log("============= START : Initialize Ledger ===========");const n=[{donor:"Danny",amount:100,timestamp:(new Date).toISOString(),pool:"red_cross_can_wildfire",donation:n.donor+n+timestamp}];for(let o=0;o<n.length;o++)n[o].docType="donation",await t.stub.putState("DON"+o,Buffer.from(JSON.stringify(n[o]))),console.log("Added",n[o]);console.log("============= END : Initialize Ledger ===========")}async createDonation(t,n,o,e,i){if(console.info("============= START : Create Donation ==========="),!(i>0))return"Invalid Amount";{const a={donor:n,time:o,amount:i,pool:e,donationID:n+o,recipient:""};await t.stub.putState(a.donationID,Buffer.from(JSON.stringify(a))),console.info("============= END : Create Donation ===========")}}async spendDonation(t,n,o,e,i){console.info("============= START : Spend Donation ===========");const a=await t.stub.getState(n);if(!a||0===a.length)throw new Error(`${n} does not exist`);const r=JSON.parse(a.toString());if(e<r.amount)throw new Error("Invalid donation amount");if(e>r.amount)throw new Error("Insufficient donation amount");r.recipient=o,await t.stub.putState(n,Buffer.from(JSON.stringify(r))),console.info("============= END : Spend Donation ===========")}}module.exports=MyContract;